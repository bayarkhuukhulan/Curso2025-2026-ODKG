PREFIX rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>PREFIX xsd:    <http://www.w3.org/2001/XMLSchema#>PREFIX schema: <http://schema.org/>PREFIX ns:     <http://goPlan.linkeddata.es/>##################################################### 0) What classes are used?####################################################SELECT DISTINCT ?typeWHERE { ?s a ?type }##################################################### 1) Count of events####################################################SELECT (COUNT(?e) AS ?numEvents)WHERE { ?e a schema:Event. }##################################################### 2) List events: name, dates, time, audience, free####################################################SELECT ?e ?name ?start ?end ?time ?aud ?freeWHERE {  ?e a schema:Event ;     ns:eventName ?name .  OPTIONAL { ?e schema:startDate ?start }  OPTIONAL { ?e schema:endDate ?end }  OPTIONAL { ?e schema:doorTime ?time }  OPTIONAL { ?e schema:audience ?aud }  OPTIONAL { ?e schema:isAccessibleForFree ?free }}ORDER BY ?start ?nameLIMIT 100##################################################### 3) Events that have a place IRI####################################################SELECT ?e ?placeWHERE {  ?e a schema:Event ; ns:hasPlace ?place .  FILTER ( isIRI(?place) )}LIMIT 100##################################################### 4) Top places by number of events####################################################SELECT ?place (COUNT(*) AS ?events)WHERE {  ?e a schema:Event ; ns:hasPlace ?place .  FILTER ( isIRI(?place) )}GROUP BY ?placeORDER BY DESC(?events)LIMIT 20##################################################### 5) Distribution of ns:eventType values####################################################SELECT (STR(?type) AS ?eventType) (COUNT(*) AS ?count)WHERE {  ?e a schema:Event ; ns:eventType ?type .}GROUP BY ?typeORDER BY DESC(?count)##################################################### 6) Distribution of schema:audience values####################################################SELECT (STR(?aud) AS ?audience) (COUNT(*) AS ?count)WHERE {  ?e a schema:Event ; schema:audience ?aud .}GROUP BY ?audORDER BY DESC(?count)##################################################### 7) Distribution of ns:weekDays values####################################################SELECT (STR(?w) AS ?weekDays) (COUNT(*) AS ?count)WHERE {  ?e a schema:Event ; ns:weekDays ?w .}GROUP BY ?wORDER BY DESC(?count)##################################################### 8) Earliest upcoming events (by startDate literal)####################################################SELECT ?e ?name ?start ?placeWHERE {  ?e a schema:Event ;     ns:eventName ?name ;     schema:startDate ?start .  OPTIONAL { ?e ns:hasPlace ?place }}ORDER BY ?start ?nameLIMIT 20##################################################### 9) Events with coordinates####################################################SELECT ?e ?name ?place ?lat ?lonWHERE {  ?e a schema:Event ; ns:eventName ?name ; ns:hasPlace ?place .  # pattern A: place -> geo node -> lat/lon  OPTIONAL {    ?place schema:geo ?geo .    ?geo   schema:latitude  ?latA ;           schema:longitude ?lonA .  }  # pattern B: lat/lon directly on the place  OPTIONAL { ?place schema:latitude  ?latB }  OPTIONAL { ?place schema:longitude ?lonB }  BIND( COALESCE(xsd:double(?latA), xsd:double(?latB)) AS ?lat )  BIND( COALESCE(xsd:double(?lonA), xsd:double(?lonB)) AS ?lon )  FILTER(BOUND(?lat) && BOUND(?lon))}ORDER BY ?nameLIMIT 100